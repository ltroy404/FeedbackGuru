from telegram import Update
from telegram.ext import Updater, CommandHandler, MessageHandler, CallbackContext, Filters
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CommandHandler, CallbackQueryHandler
import requests
import sqlite3


API_SERVER_URL = "http://localhost:12345"
TOKEN = "6194979947:AAEAzlIdQd9w_2abq7ixFBk7o3s1kiw8p9Q"


def add_api_key(update: Update, context: CallbackContext):
    try:
        api_key = update.message.text
        user_id = update.message.chat_id

        response = requests.post(f"{API_SERVER_URL}/api/v1/add_api_key", json={"api_key": api_key, "user_id": user_id})

        if response.status_code == 200:
            keyboard = [
            [InlineKeyboardButton("‚ÑπÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")],
            [InlineKeyboardButton("üîô–ù–∞–∑–∞–¥", callback_data="settings")],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            update.message.reply_text("API –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!‚úÖ", reply_markup=reply_markup)
    except Exception as e:
        keyboard = [
            [InlineKeyboardButton("‚ÑπÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")],
            [InlineKeyboardButton("üîô–ù–∞–∑–∞–¥", callback_data="settings")],
            ]
        update.message.reply_text (f"–û—à–∏–±–∫–∞: {str(e)}, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @ltroy_sw", reply_markup=reply_markup)

def remove_api_key(update: Update, context: CallbackContext):
    try:
        user_id = update.callback_query.from_user.id

        # –ó–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è API-–∫–ª—é—á–∞
        response = requests.post(f"{API_SERVER_URL}/api/v1/remove_api_key", json={"user_id": user_id})

        keyboard = [
            [InlineKeyboardButton("‚ÑπÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")],
            [InlineKeyboardButton("üîô–ù–∞–∑–∞–¥", callback_data="settings")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –±—ã–ª —É—Å–ø–µ—à–Ω—ã–º
        if response.status_code == 200:
            update.callback_query.edit_message_text(text="API –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!‚úÖ", reply_markup=reply_markup)
        else:
            update.callback_query.edit_message_text(text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ API-–∫–ª—é—á–∞.", reply_markup=reply_markup)

    except Exception as e:
        update.callback_query.edit_message_text (f"–û—à–∏–±–∫–∞: {str(e)}, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @ltroy_sw", reply_markup=reply_markup)

def print_unanswered_feedbacks(user_id, context):
    try:
        feedbacks = get_unanswered_feedbacks(context, user_id)
        if feedbacks and not feedbacks.get("error"):
            print("–ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã:")
            for feedback in feedbacks["data"]["feedbacks"]:
                print(feedback)
        else:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞:", feedbacks.get("message"))
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {str(e)}, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @ltroy_sw")

def get_unanswered_feedbacks(context, user_id, take=10, skip=0):
    try:
        headers = {"user_id": str(user_id)}
        response = requests.get(f"{API_SERVER_URL}/api/v1/feedbacks/unanswered", params={"take": take, "skip": skip}, headers=headers)
        if response.status_code == 200:
            return response.json()
        else:
            return {"error": True, "message": f"Error fetching data from server. Status code: {response.status_code}, Response: {response.text}"}
    except requests.exceptions.RequestException as e:
        return {"error": True, "message": f"–û—à–∏–±–∫–∞: {str(e)}, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @ltroy_sw"}

def send_response_to_review(user_id, review_id, response_text):
    try:
        headers = {"user_id": str(user_id)}
        response = requests.post(f"{API_SERVER_URL}/api/v1/feedbacks/{review_id}/reply", json={"response": response_text}, headers=headers)

        if response.status_code == 200:
            return response.json()
        else:
            return {"error": True, "message": f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @ltroy_sw Status code: {response.status_code}, Response: {response.text}"}
    except Exception as e:
        return {"error": True, "message": f"–û—à–∏–±–∫–∞: {str(e)}, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @ltroy_sw"}

def start(update: Update, context: CallbackContext):
    try:
        keyboard = [
            [InlineKeyboardButton("‚öô–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
            [InlineKeyboardButton("üìä–ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã", callback_data='unanswered_feedbacks')],
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        if update.callback_query:
            update.callback_query.edit_message_text('–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø—Ä–æ–µ–∫—Ç–∞ FeedBackGuru. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=reply_markup)
        else:
            update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø—Ä–æ–µ–∫—Ç–∞ FeedBackGuru. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=reply_markup)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {str(e)}, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @ltroy_sw")
        if update.callback_query:
            update.callback_query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @ltroy_sw‚ùå")
        else:
            update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @ltroy_sw‚ùå")

def send_message_to_server(prompt):
    try:
        response = requests.post(f"{API_SERVER_URL}/api/v1/generate_response", json={"prompt": prompt})
        if response.status_code == 200:
            return response.json()["response"]
        else:
            print(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}, {response.text}")
            return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {str(e)}")
        return f"–û—à–∏–±–∫–∞: {str(e)}, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @ltroy_sw"

def button_callback(update, context):
    try:
        query = update.callback_query
        query.answer()
        user_id = query.from_user.id

        keyboard = []

        if query.data == 'settings':
            keyboard = [
                [InlineKeyboardButton("üîê–î–æ–±–∞–≤–∏—Ç—å API Wildberries", callback_data="add_wildberries_api_key")],
                [InlineKeyboardButton("üóë–£–¥–∞–ª–∏—Ç—å API Wildberries", callback_data="remove_api_key")],
                [InlineKeyboardButton("‚ÑπÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query.edit_message_text(text="‚öô–ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=reply_markup)

        elif query.data == 'remove_api_key':
            remove_api_key(update, context)
            keyboard = [  
                    [InlineKeyboardButton("üîê–î–æ–±–∞–≤–∏—Ç—å API Wildberries", callback_data="add_wildberries_api_key")],
                    [InlineKeyboardButton("‚ÑπÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")],
                ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query.edit_message_text(text="API –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!‚úÖ", reply_markup=reply_markup)

        elif query.data == 'back_to_main_menu':
            start(update, context)

        if query.data == 'add_wildberries_api_key':
            context.user_data['state'] = 'adding_api_key'
            keyboard = [
                [InlineKeyboardButton("‚ÑπÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")],
                [InlineKeyboardButton("üîô–ù–∞–∑–∞–¥", callback_data="settings")],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query.edit_message_text(text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–ª—é—á Wildberries", reply_markup=reply_markup)


        if query.data == 'unanswered_feedbacks':
            feedbacks = get_unanswered_feedbacks(context, user_id)
            if feedbacks and not feedbacks.get("error"):
                if feedbacks["data"]["feedbacks"]:
                    for feedback in feedbacks["data"]["feedbacks"]:
                        context.user_data['feedback_text'] = feedback["text"]
                        keyboard = [
                            [InlineKeyboardButton("üìù–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç", callback_data=f'generate_response:{feedback["id"]}'),
                            InlineKeyboardButton("‚úèÔ∏è–û—Ç–≤–µ—Ç–∏—Ç—å –≤—Ä—É—á–Ω—É—é", callback_data=f'manually_answer:{feedback["id"]}'),
                            InlineKeyboardButton("‚ÑπÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")]
                        ]
                        reply_markup = InlineKeyboardMarkup(keyboard)
                        update.callback_query.message.reply_text(feedback["text"], reply_markup=reply_markup)

                else:
                    keyboard = [
                        [InlineKeyboardButton("‚ÑπÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")],
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    update.callback_query.message.reply_text("–ù–µ—Ç –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤üîä", reply_markup=reply_markup)
            else:
                keyboard = [
                    [InlineKeyboardButton("üîê–î–æ–±–∞–≤–∏—Ç—å API Wildberries", callback_data="add_wildberries_api_key")],
                    [InlineKeyboardButton("‚ÑπÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query.edit_message_text(text=feedbacks.get("message") + "‚ùå", reply_markup=reply_markup)

        elif query.data.startswith('generate_response:'):
            feedback_id = query.data.split(':')[1]
            prompt = context.user_data.get('feedback_text')
            generated_response = send_message_to_server(prompt)
            keyboard = [
                [InlineKeyboardButton("‚úÖ–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç", callback_data=f'publish_response:{feedback_id}')],
                [InlineKeyboardButton("‚úâÔ∏è–ò—Å–ø—Ä–∞–≤–∏—Ç—å –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f'correct_and_publish_response:{feedback_id}')],
                [InlineKeyboardButton("‚ÑπÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")],
                [InlineKeyboardButton("üîô–ù–∞–∑–∞–¥", callback_data=f'unanswered_feedbacks')],
            ]

            reply_markup = InlineKeyboardMarkup(keyboard)
            query.edit_message_text(text=generated_response, reply_markup=reply_markup)

        elif query.data.startswith('publish_response:'):
            feedback_id = query.data.split(':')[1]
            response_text = query.message.text
            result = send_response_to_review(user_id, feedback_id, response_text)


            if result.get("error"):
                keyboard = [
                    [InlineKeyboardButton("‚ÑπÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query.edit_message_text(text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {result.get('message')}‚ùå", reply_markup=reply_markup)
            else:
                keyboard = [
                    [InlineKeyboardButton("‚ÑπÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query.edit_message_text(text="–û—Ç–≤–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω‚úÖ", reply_markup=reply_markup)

        elif query.data.startswith('correct_and_publish_response:'):

            feedback_id = query.data.split(':')[1]
            context.user_data['current_feedback_id'] = feedback_id
            context.user_data['state'] = 'correcting_response'
            keyboard = [
                [InlineKeyboardButton("‚ÑπÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")],
                [InlineKeyboardButton("üîô–ù–∞–∑–∞–¥", callback_data=f'generate_response:{feedback_id}')],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query.edit_message_text(text="–í–≤–µ–¥–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç", reply_markup=reply_markup)

        elif query.data == 'back_to_feedbacks':
            feedbacks = get_unanswered_feedbacks(context, user_id)
            if feedbacks and not feedbacks.get("error"):
                if feedbacks["data"]["feedbacks"]:
                    for feedback in feedbacks["data"]["feedbacks"]:
                        context.user_data['feedback_text'] = feedback["text"]
                        keyboard = [
                            [InlineKeyboardButton("üìù–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç", callback_data=f'generate_response:{feedback["id"]}')],
                            [InlineKeyboardButton("‚úèÔ∏è–û—Ç–≤–µ—Ç–∏—Ç—å –≤—Ä—É—á–Ω—É—é", callback_data=f'manually_answer:{feedback["id"]}')],
                            [InlineKeyboardButton("‚ÑπÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")]
                        ]
                        reply_markup = InlineKeyboardMarkup(keyboard)
                        update.callback_query.message.reply_text(feedback["text"], reply_markup=reply_markup)
                else:
                    keyboard = [
                        [InlineKeyboardButton("‚ÑπÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")],
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    update.callback_query.message.reply_text("–ù–µ—Ç –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤üîä", reply_markup=reply_markup)
            else:
                keyboard = [
                    [InlineKeyboardButton("‚ÑπÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query.edit_message_text(text=feedbacks.get("message") + "‚ùå", reply_markup=reply_markup)

        elif query.data.startswith('manually_answer:'):
            feedback_id = query.data.split(':')[1]
            context.user_data['current_feedback_id'] = feedback_id
            context.user_data['state'] = 'manually_answering'
            keyboard = [
                [InlineKeyboardButton("‚ÑπÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")],
                [InlineKeyboardButton("üîô–ù–∞–∑–∞–¥", callback_data=f'unanswered_feedbacks')],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query.edit_message_text(text="–ü—Ä–∏—à–ª–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–∑—ã–≤", reply_markup=reply_markup)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {str(e)}, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @ltroy_sw")
        query.edit_message_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:{str(e)}, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @ltroy_sw‚ùå")

def send_edited_response_to_review(update: Update, context: CallbackContext):
    if context.user_data.get('state') != 'correcting_response' and context.user_data.get('state') != 'manually_answering':
        handle_unexpected_text(update, context)
        return

    edited_response = update.message.text
    feedback_id = context.user_data.get('current_feedback_id')
    user_id = str(update.message.from_user.id)  
    result = send_response_to_review(user_id, feedback_id, edited_response)

    if result.get("error"):
        update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {result.get('message')}")
    else:
        keyboard = [
                    [InlineKeyboardButton("‚ÑπÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")],
                ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        update.message.reply_text("–û—Ç–≤–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω‚úÖ", reply_markup=reply_markup)
        context.user_data['state'] = None

def handle_unexpected_text(update: Update, context: CallbackContext):
    if context.user_data.get('state') == 'correcting_response':
        send_edited_response_to_review(update, context)
    elif context.user_data.get('state') == 'manually_answering':
        send_edited_response_to_review(update, context)
    else:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é, —á—Ç–æ–±—ã –∫–ª–∏–µ–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ. –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –∏–ª–∏ –ø–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @ltroy_sw")

def main():
    updater = Updater(TOKEN, use_context=True)

    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CallbackQueryHandler(button_callback))
    dp.add_handler(MessageHandler(Filters.text & Filters.chat_type.private & ~Filters.command & Filters.update.message, add_api_key))
    dp.add_handler(MessageHandler(Filters.text & Filters.chat_type.private & ~Filters.command & Filters.update.edited_message, handle_unexpected_text))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_unexpected_text))
    dp.add_handler(CallbackQueryHandler(remove_api_key, pattern='^remove_api$'))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()